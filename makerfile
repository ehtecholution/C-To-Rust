CC = gcc
CFLAGS = -Wall -Wextra -std=c11 -I./src
LDFLAGS =

SRC_DIR = src
OBJ_DIR = obj
TEST_DIR = tests

# Source files
SRCS = $(wildcard $(SRC_DIR)/*.c $(SRC_DIR)/*/*.c)
OBJS = $(SRCS:$(SRC_DIR)/%.c=$(OBJ_DIR)/%.o)

# Test files
TEST_SRCS = $(wildcard $(TEST_DIR)/*.c)
TEST_OBJS = $(TEST_SRCS:$(TEST_DIR)/%.c=$(OBJ_DIR)/$(TEST_DIR)/%.o)
TEST_BINS = $(TEST_SRCS:$(TEST_DIR)/%.c=%)

# Main target
TARGET = complex_c_project

.PHONY: all clean test

all: $(TARGET)

$(TARGET): $(OBJS)
	$(CC) $(LDFLAGS) -o $@ $^

$(OBJ_DIR)/%.o: $(SRC_DIR)/%.c
	@mkdir -p $(@D)
	$(CC) $(CFLAGS) -c -o $@ $

# Test targets
test: $(TEST_BINS)
	@for test in $(TEST_BINS); do ./$$test; done

%: $(OBJ_DIR)/$(TEST_DIR)/%.o $(filter-out $(OBJ_DIR)/main.o,$(OBJS))
	$(CC) $(LDFLAGS) -o $@ $^

$(OBJ_DIR)/$(TEST_DIR)/%.o: $(TEST_DIR)/%.c
	@mkdir -p $(@D)
	$(CC) $(CFLAGS) -c -o $@ $

clean:
	rm -rf $(OBJ_DIR)
	rm -f $(TARGET) $(TEST_BINS)

# Dependencies
-include $(OBJS:.o=.d)
-include $(TEST_OBJS:.o=.d)

%.d: %.c
	@$(CC) $(CFLAGS) $< -MM -MT $(@:.d=.o) >$@